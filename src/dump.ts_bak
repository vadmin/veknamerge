import * as vscode from 'vscode';
import * as prettier from 'prettier';

export function activate(context: vscode.ExtensionContext) {
    let disposable = vscode.commands.registerCommand('extension.convertInsertToMerge', async () => {
        const editor = vscode.window.activeTextEditor;
        if (editor) {
            const selection = editor.selection;
            const text = editor.document.getText(selection);

            console.log('Selected text:', text);

            const mergeStatement = await convertInsertToMerge(text);

            console.log('Generated merge statement:', mergeStatement);

            editor.edit(editBuilder => {
                editBuilder.replace(selection, mergeStatement);
            }).then(success => {
                if (success) {
                    console.log('Text replaced successfully');
                } else {
                    console.error('Failed to replace text');
                }
            });
        }
    });

    context.subscriptions.push(disposable);
}

async function convertInsertToMerge(insertStatement: string): Promise<string> {
    const insertRegex = /INSERT INTO (\w+)\s*\(([^)]+)\)\s*VALUES\s*\(([^)]+)\)/i;
    const match = insertStatement.match(insertRegex);

    if (!match) {
        vscode.window.showErrorMessage('Selected text is not a valid INSERT statement.');
        return insertStatement;
    }

    const tableName = match[1];
    const columns = match[2].split(',').map(col => col.trim());
    const values = match[3].split(',').map(val => val.trim());

    console.log('Parsed table name:', tableName);
    console.log('Parsed columns:', columns);
    console.log('Parsed values:', values);

    const selectedKeys = await vscode.window.showQuickPick(
        columns.map(col => ({ label: col, picked: false })),
        {
            canPickMany: true,
            placeHolder: 'Select columns to use as keys for the condition'
        }
    );

    if (!selectedKeys) {
        return insertStatement;
    }

    const conditions = selectedKeys.map(key => `${key.label} = ${key.label}`).join(' AND ');

    const mergeStatement = `
MERGE INTO ${tableName} USING dual ON (${conditions})
WHEN MATCHED THEN
    UPDATE SET ${columns.map((col, i) => `${col} = ${values[i]}`).join(', ')}
WHEN NOT MATCHED THEN
    INSERT (${columns.join(', ')})
    VALUES (${values.join(', ')});
    `.trim();

    console.log('Generated merge statement before formatting:', mergeStatement);

    return formatCode(mergeStatement);
}

function formatCode(code: string): string {
    return prettier.format(code, { parser: 'sql' });
}

export function deactivate() {}



// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
import * as vscode from 'vscode';
import * as prettier from 'prettier';

// This method is called when your extension is activated
// Your extension is activated the very first time the command is executed
export function activate(context: vscode.ExtensionContext) {

	// Use the console to output diagnostic information (console.log) and errors (console.error)
	// This line of code will only be executed once when your extension is activated
	console.log('Good! "veknamerge" is now active!');

	// The command has been defined in the package.json file
	// Now provide the implementation of the command with registerCommand
	// The commandId parameter must match the command field in package.json
	let disposable = vscode.commands.registerCommand('extension.convertInsertToMerge', async () => {
        const editor = vscode.window.activeTextEditor;
        if (editor) {
            const selection = editor.selection;
            const text = editor.document.getText(selection);

            const mergeStatement = await convertInsertToMerge(text);

            editor.edit(editBuilder => {
                editBuilder.replace(selection, mergeStatement);
            });
        }
    });

    context.subscriptions.push(disposable);
}

async function convertInsertToMerge(insertStatement: string): Promise<string> {
    const insertRegex = /INSERT INTO (\w+)\s*\(([^)]+)\)\s*VALUES\s*\(([^)]+)\)/i;
    const match = insertStatement.match(insertRegex);

    if (!match) {
        vscode.window.showErrorMessage('Selected text is not a valid INSERT statement.');
        return insertStatement;
    }

	const tableName = match[1];
    const columns = match[2].split(',').map(col => col.trim());
    const values = match[3].split(',').map(val => val.trim());

    const selectedKeys = await vscode.window.showQuickPick(
        columns.map(col => ({ label: col, picked: false })),
        {
            canPickMany: true,
            placeHolder: 'Select keys for the condition'
        }
    );

    if (!selectedKeys) {
        return insertStatement;
    }

    const conditions = selectedKeys.map(key => `${key.label} = ${key.label}`).join(' AND ');

    const mergeStatement = `MERGE INTO ${tableName} USING dual ON (${conditions}) WHEN MATCHED THEN UPDATE SET ${columns.map((col, i) => `${col} = ${values[i]}`).join(', ')} WHEN NOT MATCHED THEN INSERT (${columns.join(', ')}) VALUES (${values.join(', ')}); `.trim();
	
	return formatCode(mergeStatement) || mergeStatement;
}

function formatCode(code: string): string {
    return prettier.format(code, { parser: 'sql' });
}


// This method is called when your extension is deactivated
export function deactivate() {}
